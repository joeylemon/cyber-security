Exploit 4

## Mistakes the enabled this exploit
There is a buffer overflow in the copyFile function. We overwrite the
return pointer of copyFile to point into the NOP sled containing our shellcode.
This buffer overflow attack can exist due to the strcpy function that is copying our
attack into src. strcat(dst, sec) is then called which puts our attack into dst.

## How we constructed our inputs
We created a bash script to call the executable with, 'ci' and our attack string. The attack string was generated using Python2.

## Step-by-step explanation of exploit
First, we generate the attack string using Python. This attack string is sent through argv[2] and eventually passed to copyFile.
The attack string is structured as follows: NOPs + shellcode + padding + return address. strcat will copy our attack (along with some other things) into dst causing the overflow.
Next, our attack string will overwrite the return address of copyFile. The function returns at line 169 due to the program not being able to open real files.
The return address now points to somewhere in the NOP sled and the instruction pointer will eventually execute our shellcode. We now have opened a shell.

## Argument for uniqueness
This exploit targets a buffer overflow in copyFile. This separates it from our other exploits.
This attack will work while strcat is used with no restrictions on it. Something like strncat would mitigate this attack.
